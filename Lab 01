def print_board(board):
    positions = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
    index = 0
    for i in range(3):
        print(" | ".join([positions[index + j] if board[i][j] == " " else board[i][j] for j in range(3)]))
        print("-" * 9)
        index += 3

def check_winner(board, player):
    for i in range(3):
        if all([cell == player for cell in board[i]]):
            return True
        if all([board[j][i] == player for j in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]):
        return True
    if all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

def is_board_full(board):
    return all(cell != " " for row in board for cell in row)

def minimax(board, depth, is_maximizing, alpha, beta):
    if check_winner(board, "O"):
        return 1
    if check_winner(board, "X"):
        return -1
    if is_board_full(board):
        return 0

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = " "
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = " "
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def bestscore(board):
    best_move = None
    best_value = float('-inf')
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                move_value = minimax(board, 0, False, float('-inf'), float('inf'))
                board[i][j] = " "
                if move_value > best_value:
                    best_value = move_value
                    best_move = (i, j)
    return best_move

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"
    
    while True:
        print_board(board)
        if current_player == "X":
            print("Player X, enter your move (choose the position from 1 to 9):")
            try:
                move = int(input())
                if not (1 <= move <= 9):
                    print("Invalid input. Please choose a number between 1 and 9.")
                    continue
                row, col = (move - 1) // 3, (move - 1) % 3
                if board[row][col] != " ":
                    print("That spot is already taken. Try again.")
                    continue
                board[row][col] = current_player
            except ValueError:
                print("Invalid input. Please enter a number between 1 and 9.")
                continue
        else:
            print("Player O is making a move...")
            move = bestscore(board)
            if move:
                board[move[0]][move[1]] = current_player
        
        if check_winner(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = "O" if current_player == "X" else "X"

if __name__ == "__main__":
    tic_tac_toe()
